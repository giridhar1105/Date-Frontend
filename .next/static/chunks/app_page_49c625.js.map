{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/giridhar/projects/Date/Date-Frontend/app/page.js"],"sourcesContent":["// import Header from \"./Header/page\";\n// import Home from \"./Home/page\";\n\n// export default function Homee() {\n//   return (\n//     <div>\n//       <Header />\n//       <Home />\n//     </div>\n//   );\n// }\n\n\n\"use client\"\nimport { useState } from 'react';\nimport crypto from 'crypto';\n\n// Block and Blockchain Classes\n\nclass Block {\n  constructor(index, timestamp, data, previousHash = '') {\n    this.index = index;\n    this.timestamp = timestamp;\n    this.data = data;\n    this.previousHash = previousHash;\n    this.hash = this.calculateHash();\n  }\n\n  calculateHash() {\n    const blockString = `${this.index}${this.timestamp}${JSON.stringify(this.data)}${this.previousHash}`;\n    return crypto.createHash('sha256').update(blockString).digest('hex');\n  }\n}\n\nclass Blockchain {\n  constructor() {\n    this.chain = [];\n    this.createGenesisBlock();\n  }\n\n  createGenesisBlock() {\n    const genesisBlock = new Block(0, Date.now(), 'Genesis Block', '0');\n    this.chain.push(genesisBlock);\n  }\n\n  addBlock(data) {\n    const previousBlock = this.chain[this.chain.length - 1];\n    const newBlock = new Block(this.chain.length, Date.now(), data, previousBlock.hash);\n    this.chain.push(newBlock);\n  }\n\n  getChain() {\n    return this.chain;\n  }\n}\n\n// API Route Handler\nlet blockchain = new Blockchain();\n\nexport default function Home() {\n  const [blockData, setBlockData] = useState('');\n  const [blockchainData, setBlockchainData] = useState([]);\n\n  const fetchBlockchain = async () => {\n    setBlockchainData(blockchain.getChain());\n  };\n\n  const addBlock = () => {\n    if (!blockData) {\n      alert('Please provide data for the new block!');\n      return;\n    }\n\n    blockchain.addBlock(blockData);\n    alert('New block added!');\n    fetchBlockchain(); // Refresh blockchain state\n    setBlockData(''); // Clear input field\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Blockchain in Next.js</h1>\n      <input\n        type=\"text\"\n        value={blockData}\n        onChange={(e) => setBlockData(e.target.value)}\n        placeholder=\"Enter block data\"\n        style={{ padding: '10px', fontSize: '16px', marginBottom: '10px', width: '300px' }}\n      />\n      <button\n        onClick={addBlock}\n        style={{\n          padding: '10px 20px',\n          fontSize: '16px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          cursor: 'pointer',\n        }}\n      >\n        Add Block\n      </button>\n\n      <h2 style={{ marginTop: '20px' }}>Blockchain</h2>\n      <button\n        onClick={fetchBlockchain}\n        style={{\n          padding: '10px 20px',\n          fontSize: '16px',\n          backgroundColor: '#008CBA',\n          color: 'white',\n          border: 'none',\n          cursor: 'pointer',\n          marginBottom: '20px',\n        }}\n      >\n        Fetch Blockchain\n      </button>\n      <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n        {JSON.stringify(blockchainData, null, 2)}\n      </pre>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}